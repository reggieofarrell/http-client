/**
 * Main code generation interface
 *
 * This module provides the primary API for generating SDK clients from OpenAPI specifications.
 * Uses openapi-typescript for type generation and focuses on SDK client structure.
 */

import openapiTS, { astToString } from 'openapi-typescript';
import { join } from 'path';
import { promises as fs } from 'fs';
import { parseOpenApiSpec } from './parsers/openapi-parser.js';
import { parseRoutes } from './parsers/route-parser.js';
import { generateClientClass } from './templates/client-template.js';
import { generateRouteGroups } from './templates/route-group-template.js';
import { writeGeneratedFiles } from './utils/file-writer.js';

/**
 * Configuration options for client generation
 */
export interface GenerateClientOptions {
  /** OpenAPI specification - can be a file path or parsed object */
  openApiSpec: string | object;
  /** Directory where generated files will be written */
  outputDir: string;
  /** Override the default client name (defaults to spec title or 'ApiClient') */
  clientName?: string;
  /** Strategy for grouping routes: 'tags' (default) or 'path' */
  groupingStrategy?: 'tags' | 'path';
  /** Whether to include deprecated endpoints (default: false) */
  includeDeprecated?: boolean;
  /** Path to types file generated by openapi-typescript (optional) */
  typesFile?: string;
}

/**
 * Generate a strongly-typed SDK client from an OpenAPI specification
 *
 * @param options - Configuration options for client generation
 * @throws {Error} When the OpenAPI spec is invalid or generation fails
 *
 * @example
 * ```typescript
 * await generateClient({
 *   openApiSpec: './openapi.json',
 *   outputDir: './src/api-client',
 *   clientName: 'MyApiClient',
 * });
 * ```
 */
export async function generateClient(options: GenerateClientOptions): Promise<void> {
  const {
    openApiSpec,
    outputDir,
    clientName,
    groupingStrategy = 'tags',
    includeDeprecated = false,
    typesFile,
  } = options;

  try {
    // Parse the OpenAPI specification
    const spec = await parseOpenApiSpec(openApiSpec);

    // Extract and validate the specification
    if (!spec.openapi || !spec.paths) {
      throw new Error('Invalid OpenAPI specification: missing openapi version or paths');
    }

    // Generate types using openapi-typescript
    const typesOutputPath = typesFile || join(outputDir, 'types.d.ts');
    let typesGenerated = false;

    try {
      // Ensure output directory exists
      await fs.mkdir(outputDir, { recursive: true });

      // openapi-typescript expects the parsed spec object, not a file path
      // Cast to any to work around type incompatibilities between openapi-types and openapi-typescript
      const ast = await openapiTS(spec as any);
      const typesContent = astToString(ast);
      await fs.writeFile(typesOutputPath, typesContent, 'utf-8');
      typesGenerated = true;
      console.log(`üìÑ Generated types: ${typesOutputPath}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è  Could not generate types with openapi-typescript:', error);
    }

    // Parse and group routes
    const routeGroups = parseRoutes(spec, {
      groupingStrategy,
      includeDeprecated,
    });

    // Generate the main client class
    const clientClass = generateClientClass({
      clientName: clientName || spec.info?.title || 'ApiClient',
      routeGroups,
      typesFile: typesGenerated ? typesOutputPath : undefined,
    });

    // Generate route group classes
    const routeGroupClasses = generateRouteGroups(routeGroups, {
      typesFile: typesGenerated ? typesOutputPath : undefined,
    });

    // Write all generated files to the output directory
    await writeGeneratedFiles({
      outputDir,
      clientClass,
      routeGroupClasses,
      clientName: clientName || spec.info?.title || 'ApiClient',
      typesFile: typesGenerated ? typesOutputPath : undefined,
    });

    console.log(`‚úÖ Generated SDK client in ${outputDir}`);
    console.log(`üìÅ Client: ${clientName || spec.info?.title || 'ApiClient'}`);
    console.log(`üìÅ Route groups: ${routeGroups.length}`);
    if (typesGenerated) {
      console.log(`üìÅ Types: Generated with openapi-typescript`);
    }
  } catch (error) {
    console.error('‚ùå Failed to generate client:', error);
    throw error;
  }
}
