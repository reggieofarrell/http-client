/**
 * File Writing Utilities
 *
 * This module handles writing generated files to the filesystem in an
 * organized directory structure.
 */

import { promises as fs } from 'fs';
import { join } from 'path';
// import { RouteGroup } from '../parsers/route-parser';

/**
 * Configuration for file writing
 */
interface FileWritingOptions {
  /** Output directory for generated files */
  outputDir: string;
  /** Client class code */
  clientClass: string;
  /** Route group classes */
  routeGroupClasses: Record<string, string>;
  /** Client name */
  clientName: string;
  /** Path to types file generated by openapi-typescript */
  typesFile?: string | undefined;
  /** Custom error types code (if any) */
  errorTypes?: string | null;
}

/**
 * Write all generated files to the filesystem
 *
 * @param options - File writing options
 */
export async function writeGeneratedFiles(options: FileWritingOptions): Promise<void> {
  const { outputDir, clientClass, routeGroupClasses, clientName, typesFile, errorTypes } = options;

  // Create output directory structure (with types folder if needed)
  await createDirectoryStructure(outputDir, !!errorTypes);

  // Write main client file
  await writeClientFile(outputDir, clientClass, clientName);

  // Write route group files
  await writeRouteGroupFiles(outputDir, routeGroupClasses);

  // Write types file if provided
  if (typesFile) {
    await writeTypesFile(outputDir, typesFile);
  }

  // Write error types if provided
  if (errorTypes) {
    await writeErrorTypesFile(outputDir, errorTypes);
  }

  // Write index files
  await writeIndexFiles(
    outputDir,
    clientName,
    Object.keys(routeGroupClasses),
    !!typesFile,
    !!errorTypes
  );
}

/**
 * Create the directory structure for generated files
 */
async function createDirectoryStructure(
  outputDir: string,
  includeErrorTypes: boolean = false
): Promise<void> {
  const directories = [outputDir, join(outputDir, 'routes')];

  // Add types directory if we have custom error types
  if (includeErrorTypes) {
    directories.push(join(outputDir, 'types'));
  }

  for (const dir of directories) {
    try {
      await fs.mkdir(dir, { recursive: true });
    } catch (error) {
      // Directory might already exist, which is fine
    }
  }
}

/**
 * Write the main client file
 */
async function writeClientFile(
  outputDir: string,
  clientClass: string,
  _clientName: string
): Promise<void> {
  const clientFile = join(outputDir, 'client.ts');
  await fs.writeFile(clientFile, clientClass, 'utf-8');
  console.log(`üìÑ Generated client: ${clientFile}`);
}

/**
 * Write route group files
 */
async function writeRouteGroupFiles(
  outputDir: string,
  routeGroupClasses: Record<string, string>
): Promise<void> {
  const routesDir = join(outputDir, 'routes');

  for (const [groupName, classCode] of Object.entries(routeGroupClasses)) {
    const fileName = `${groupName}.route.ts`;
    const filePath = join(routesDir, fileName);
    await fs.writeFile(filePath, classCode, 'utf-8');
    console.log(`üìÑ Generated route group: ${filePath}`);
  }
}

/**
 * Write types file (copy from openapi-typescript output)
 */
async function writeTypesFile(outputDir: string, typesFile: string): Promise<void> {
  try {
    const typesContent = await fs.readFile(typesFile, 'utf-8');
    const outputTypesPath = join(outputDir, 'types.d.ts');
    await fs.writeFile(outputTypesPath, typesContent, 'utf-8');
    console.log(`üìÑ Generated types: ${outputTypesPath}`);
  } catch (error) {
    console.warn('‚ö†Ô∏è  Could not copy types file:', error);
  }
}

/**
 * Write error types file
 */
async function writeErrorTypesFile(outputDir: string, errorTypes: string): Promise<void> {
  const errorFilePath = join(outputDir, 'types', 'errors.ts');
  await fs.writeFile(errorFilePath, errorTypes, 'utf-8');
  console.log(`üìÑ Generated error types: ${errorFilePath}`);
}

/**
 * Write index files for exports
 */
async function writeIndexFiles(
  outputDir: string,
  clientName: string,
  routeGroupNames: string[],
  hasTypes: boolean,
  hasErrors: boolean = false
): Promise<void> {
  // Write main index file
  await writeMainIndexFile(outputDir, clientName, routeGroupNames, hasTypes, hasErrors);

  // Write routes index file
  await writeRoutesIndexFile(outputDir, routeGroupNames);
}

/**
 * Write the main index file
 */
async function writeMainIndexFile(
  outputDir: string,
  clientName: string,
  routeGroupNames: string[],
  hasTypes: boolean,
  hasErrors: boolean = false
): Promise<void> {
  const indexContent = generateMainIndexContent(clientName, routeGroupNames, hasTypes, hasErrors);
  const indexPath = join(outputDir, 'index.ts');
  await fs.writeFile(indexPath, indexContent, 'utf-8');
  console.log(`üìÑ Generated main index: ${indexPath}`);
}

/**
 * Write the routes index file
 */
async function writeRoutesIndexFile(outputDir: string, routeGroupNames: string[]): Promise<void> {
  const routesIndexContent = generateRoutesIndexContent(routeGroupNames);
  const routesIndexPath = join(outputDir, 'routes', 'index.ts');
  await fs.writeFile(routesIndexPath, routesIndexContent, 'utf-8');
  console.log(`üìÑ Generated routes index: ${routesIndexPath}`);
}

/**
 * Generate main index file content
 */
function generateMainIndexContent(
  clientName: string,
  routeGroupNames: string[],
  hasTypes: boolean,
  hasErrors: boolean = false
): string {
  const routeExports = routeGroupNames
    .map(name => `export { ${toPascalCase(name)}RouteGroup } from './routes/${name}.route';`)
    .join('\n');

  const typesExport = hasTypes
    ? `// Types generated by openapi-typescript
export * from './types';`
    : '';

  const errorsExport = hasErrors
    ? `
// Error response types
export * from './types/errors';`
    : '';

  return `/**
 * Generated API Client
 *
 * This file exports the main client and all related types.
 */

// Main client
export { ${clientName} } from './client';

// Route groups
${routeExports}

${typesExport}${errorsExport}

// Re-export HttpClient for convenience
export { HttpClient, HttpClientOptions } from '@reggieofarrell/http-client';
`;
}

/**
 * Generate routes index file content
 */
function generateRoutesIndexContent(routeGroupNames: string[]): string {
  const exports = routeGroupNames
    .map(name => `export { ${toPascalCase(name)}RouteGroup } from './${name}.route';`)
    .join('\n');

  return `/**
 * Route Groups
 *
 * This file exports all route group classes.
 */

${exports}
`;
}

/**
 * Convert string to PascalCase
 */
function toPascalCase(str: string): string {
  return str
    .split(/[-_\s]+/)
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join('');
}
