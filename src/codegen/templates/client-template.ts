/**
 * Client Class Template Generator
 *
 * This module generates the main client class that extends HttpClient
 * and includes all route groups as properties.
 */

import { RouteGroup } from '../parsers/route-parser';

/**
 * Configuration for client generation
 */
interface ClientGenerationOptions {
  /** Name of the generated client class */
  clientName: string;
  /** Route groups to include */
  routeGroups: RouteGroup[];
  /** Path to types file generated by openapi-typescript */
  typesFile?: string | undefined;
  /** Default base URL from OpenAPI spec */
  defaultBaseURL?: string | undefined;
  /** Error message path for the generated client */
  errorMessagePath?: string | undefined;
}

/**
 * Generate the main client class code
 *
 * @param options - Client generation options
 * @returns Generated client class code
 */
export function generateClientClass(options: ClientGenerationOptions): string {
  const { clientName, routeGroups, typesFile, defaultBaseURL, errorMessagePath } = options;

  const imports = generateImports(routeGroups, typesFile);
  const properties = generateProperties(routeGroups);
  const constructor = generateConstructor(
    clientName,
    routeGroups,
    defaultBaseURL,
    errorMessagePath
  );
  const classBody = generateClassBody(clientName, properties, constructor);

  return `${imports}

${classBody}`;
}

/**
 * Generate import statements for the client
 */
function generateImports(routeGroups: RouteGroup[], typesFile?: string): string {
  const imports = [];

  // HttpClient imports
  imports.push("import { HttpClient, HttpClientOptions } from '@reggieofarrell/http-client';");

  // Add route group imports
  for (const group of routeGroups) {
    imports.push(`import { ${group.className} } from './routes/${group.name}.route';`);
  }

  // Add types import if types file is available
  if (typesFile) {
    imports.push(`import type * as ApiTypes from './types';`);
  }

  return imports.join('\n');
}

/**
 * Generate class properties for route groups
 */
function generateProperties(routeGroups: RouteGroup[]): string {
  return routeGroups
    .map(
      group =>
        `  /** ${group.displayName} operations */\n  public readonly ${group.name}: ${group.className};`
    )
    .join('\n');
}

/**
 * Generate constructor for the client
 */
function generateConstructor(
  clientName: string,
  routeGroups: RouteGroup[],
  defaultBaseURL?: string,
  errorMessagePath?: string
): string {
  const routeGroupInitializations = routeGroups
    .map(group => `    this.${group.name} = new ${group.className}(this);`)
    .join('\n');

  // Build config object with errorMessagePath if provided
  const configDefaults = [];
  if (defaultBaseURL) {
    configDefaults.push(`baseURL: '${defaultBaseURL}'`);
  }
  if (errorMessagePath) {
    configDefaults.push(`errorMessagePath: '${errorMessagePath}'`);
  }

  const configMerge =
    configDefaults.length > 0 ? `{ ${configDefaults.join(', ')}, ...config }` : 'config || {}';

  return `  /**
   * Create a new ${clientName} instance
   *
   * @param config - HttpClient configuration options${defaultBaseURL ? ` (defaults to ${defaultBaseURL})` : ''}
   */
  constructor(config?: HttpClientOptions) {
    super(${configMerge});
${routeGroupInitializations}
  }`;
}

/**
 * Generate the complete class body
 */
function generateClassBody(clientName: string, properties: string, constructor: string): string {
  return `/**
 * Generated SDK client for the API
 *
 * This client extends HttpClient and provides strongly-typed methods
 * for all API endpoints, organized by route groups.
 */
export class ${clientName} extends HttpClient {
${properties}

${constructor}
}`;
}
