{
  "swagger": "2.0",
  "info": {
    "title": "Sample Swagger 2.0 API",
    "version": "1.0.0",
    "description": "A sample API for testing Swagger 2.0 to OpenAPI 3.0+ conversion"
  },
  "host": "api.example.com",
  "basePath": "/v1",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "List users",
        "operationId": "listUsers",
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by ID",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["products"],
        "summary": "List products",
        "operationId": "listProducts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 20
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "minimum": 0,
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "schema": {
              "$ref": "#/definitions/ProductList"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User ID"
        },
        "name": {
          "type": "string",
          "description": "User name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User email"
        },
        "age": {
          "type": "integer",
          "minimum": 0,
          "description": "User age"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Creation timestamp"
        }
      },
      "required": ["id", "name", "email"]
    },
    "CreateUserRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "User name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User email"
        },
        "age": {
          "type": "integer",
          "minimum": 0,
          "description": "User age"
        }
      },
      "required": ["name", "email"]
    },
    "UpdateUserRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "User name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User email"
        },
        "age": {
          "type": "integer",
          "minimum": 0,
          "description": "User age"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Product ID"
        },
        "name": {
          "type": "string",
          "description": "Product name"
        },
        "price": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Product price"
        },
        "description": {
          "type": "string",
          "description": "Product description"
        }
      },
      "required": ["id", "name", "price"]
    },
    "ProductList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "total": {
          "type": "integer",
          "minimum": 0
        },
        "limit": {
          "type": "integer",
          "minimum": 1
        },
        "offset": {
          "type": "integer",
          "minimum": 0
        }
      },
      "required": ["items", "total", "limit", "offset"]
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code"
        },
        "message": {
          "type": "string",
          "description": "Error message"
        },
        "details": {
          "type": "string",
          "description": "Error details"
        }
      },
      "required": ["code", "message"]
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "type": "apiKey",
      "in": "header",
      "name": "X-API-Key"
    },
    "BearerAuth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://auth.example.com/oauth/authorize",
      "scopes": {
        "read:users": "Read user information",
        "write:users": "Modify user information",
        "read:products": "Read product information"
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    },
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "User management operations"
    },
    {
      "name": "products",
      "description": "Product management operations"
    }
  ]
}
