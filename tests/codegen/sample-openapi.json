{
  "openapi": "3.0.3",
  "info": {
    "title": "Comprehensive Sample API",
    "version": "2.1.0",
    "description": "A comprehensive sample API for testing all OpenAPI specification features",
    "termsOfService": "https://api.example.com/terms",
    "contact": {
      "name": "API Support",
      "url": "https://api.example.com/support",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.example.com",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.example.com",
      "description": "Staging server"
    },
    {
      "url": "https://{environment}.api.example.com",
      "description": "Environment-specific server",
      "variables": {
        "environment": {
          "enum": ["dev", "test", "prod"],
          "default": "dev"
        }
      }
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "List users",
        "operationId": "listUsers",
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create user",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by ID",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      }
    },
    "/documents": {
      "get": {
        "tags": ["documents"],
        "summary": "List documents",
        "operationId": "listDocuments",
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/OffsetParam"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["created", "updated", "title"],
              "default": "created"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["documents"],
        "summary": "Create document",
        "operationId": "createDocument",
        "security": [
          {
            "OAuth2": ["write:documents"]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocumentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocumentForm"
              },
              "encoding": {
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            },
            "links": {
              "getDocument": {
                "$ref": "#/components/links/GetDocument"
              }
            }
          }
        },
        "callbacks": {
          "onDocumentCreated": {
            "$ref": "#/components/callbacks/DocumentCreated"
          }
        }
      }
    },
    "/documents/{id}": {
      "get": {
        "tags": ["documents"],
        "summary": "Get document by ID",
        "operationId": "getDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Document details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["authentication"],
        "summary": "User login",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/user-updated": {
      "post": {
        "tags": ["webhooks"],
        "summary": "User updated webhook",
        "operationId": "userUpdatedWebhook",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdatedEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.example.com/oauth/authorize",
            "tokenUrl": "https://auth.example.com/oauth/token",
            "scopes": {
              "read:users": "Read user information",
              "write:users": "Modify user information",
              "read:documents": "Read document information",
              "write:documents": "Modify document information"
            }
          }
        }
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {
      "IdParam": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "Resource identifier"
      },
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        },
        "description": "Number of items to return"
      },
      "OffsetParam": {
        "name": "offset",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "description": "Number of items to skip"
      }
    },
    "responses": {
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "examples": {
      "UserExample": {
        "summary": "A user example",
        "value": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "name": "John Doe",
          "email": "john@example.com",
          "age": 30,
          "createdAt": "2023-01-01T00:00:00Z"
        }
      },
      "ErrorExample": {
        "summary": "An error example",
        "value": {
          "code": "USER_NOT_FOUND",
          "message": "User with ID 123 was not found",
          "details": "The requested user does not exist in the system"
        }
      }
    },
    "links": {
      "GetDocument": {
        "operationId": "getDocument",
        "parameters": {
          "id": "$response.body#/id"
        }
      }
    },
    "callbacks": {
      "DocumentCreated": {
        "{$request.body#/callbackUrl}": {
          "post": {
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DocumentCreatedEvent"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Callback processed successfully"
              }
            }
          }
        }
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "description": "User name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "description": "User age"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        },
        "required": ["id", "name", "email"]
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "description": "User age"
          }
        },
        "required": ["name", "email"]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "description": "User age"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID"
          },
          "title": {
            "type": "string",
            "description": "Document title"
          },
          "content": {
            "type": "string",
            "description": "Document content"
          },
          "authorId": {
            "type": "string",
            "description": "Author user ID"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        },
        "required": ["id", "title", "content", "authorId"]
      },
      "CreateDocumentRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Document title"
          },
          "content": {
            "type": "string",
            "description": "Document content"
          },
          "authorId": {
            "type": "string",
            "description": "Author user ID"
          }
        },
        "required": ["title", "content", "authorId"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "string",
            "description": "Error details"
          }
        },
        "required": ["code", "message"]
      },
      "DocumentList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": ["items", "total", "limit", "offset"]
      },
      "CreateDocumentForm": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Document title"
          },
          "content": {
            "type": "string",
            "description": "Document content"
          },
          "authorId": {
            "type": "string",
            "description": "Author user ID"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "description": "Document file"
          }
        },
        "required": ["title", "content", "authorId"]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "description": "User password"
          },
          "rememberMe": {
            "type": "boolean",
            "default": false,
            "description": "Remember login session"
          }
        },
        "required": ["email", "password"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Token expiration time in seconds"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": ["accessToken", "expiresIn", "user"]
      },
      "UserUpdatedEvent": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "enum": ["user.updated"],
            "description": "Event type"
          },
          "userId": {
            "type": "string",
            "description": "Updated user ID"
          },
          "changes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of changed fields"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Event timestamp"
          }
        },
        "required": ["eventType", "userId", "timestamp"]
      },
      "DocumentCreatedEvent": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "enum": ["document.created"],
            "description": "Event type"
          },
          "documentId": {
            "type": "string",
            "description": "Created document ID"
          },
          "authorId": {
            "type": "string",
            "description": "Document author ID"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Event timestamp"
          }
        },
        "required": ["eventType", "documentId", "authorId", "timestamp"]
      },
      "BaseEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity identifier"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        },
        "required": ["id", "createdAt", "updatedAt"]
      },
      "UserProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User name"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "User email"
              },
              "age": {
                "type": "integer",
                "minimum": 0,
                "maximum": 150,
                "description": "User age"
              },
              "preferences": {
                "$ref": "#/components/schemas/UserPreferences"
              }
            },
            "required": ["name", "email"]
          }
        ]
      },
      "UserPreferences": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "enum": ["light", "dark", "auto"],
            "default": "auto",
            "description": "UI theme preference"
          },
          "notifications": {
            "type": "object",
            "properties": {
              "email": {
                "type": "boolean",
                "default": true
              },
              "push": {
                "type": "boolean",
                "default": false
              }
            }
          },
          "language": {
            "type": "string",
            "pattern": "^[a-z]{2}(-[A-Z]{2})?$",
            "default": "en",
            "description": "Preferred language code"
          }
        }
      },
      "PolymorphicEntity": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "$ref": "#/components/schemas/Document"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user": "#/components/schemas/User",
            "document": "#/components/schemas/Document"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name with validation error"
          },
          "message": {
            "type": "string",
            "description": "Validation error message"
          },
          "code": {
            "type": "string",
            "enum": ["required", "format", "minLength", "maxLength", "pattern"],
            "description": "Validation error code"
          }
        },
        "required": ["field", "message", "code"]
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Request success status"
          },
          "data": {
            "type": "object",
            "description": "Response data"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "Validation errors"
          },
          "meta": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "requestId": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        },
        "required": ["success"]
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    },
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "User management operations",
      "externalDocs": {
        "description": "User API Documentation",
        "url": "https://docs.example.com/users"
      }
    },
    {
      "name": "documents",
      "description": "Document management operations"
    },
    {
      "name": "authentication",
      "description": "Authentication and authorization"
    },
    {
      "name": "webhooks",
      "description": "Webhook endpoints"
    }
  ],
  "externalDocs": {
    "description": "Complete API Documentation",
    "url": "https://docs.example.com/api"
  },
  "x-custom-extension": {
    "version": "2.1.0",
    "features": ["authentication", "webhooks", "callbacks", "polymorphism"],
    "rateLimits": {
      "requests": 1000,
      "window": "1h"
    }
  }
}
